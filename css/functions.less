@import "variables";

.set-colors(@list,@alternate) {
  .iter(length(@list));
  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    @pair: extract(@list, @i);
    @key: extract(@pair, 1);
    @value: extract(@pair, 2);
    .@{prefix}-text-@{key}, .@{prefix}-hover-text-@{key}:hover {
      color: @value;
    }
    .@{prefix}-@{key}, .@{prefix}-hover-@{key} {
      background-color: @value;
      color: @alternate;
    }
  }
}

.all-colors() {
  .iter(length(@light-colors), @light-colors);
  .iter(length(@dark-colors), @dark-colors);
  .iter(@i,@colors) when (@i > 0) {
    .iter(@i - 1, @colors);
    @pair: extract(@colors, @i);
    @key: extract(@pair, 1);
    @value: extract(@pair, 2);
    .border-@{key} {
      border-color: @value;
    }
    .borderColor(@key, @value);
    .borderHover(@key, @value);
  }
}

.borderColor(@name,@value) {
  .itB(length(@sides));
  .itB(@i) when (@i > 0) {
    .itB(@i - 1);
    @b: extract(@sides, @i);
    .border-@{b}-@{name} {
      border-@{b}-color: @value;
    }
  }
}

.borderHover(@color,@value) {
  .itB(length(@sides));
  .itB(@i) when (@i > 0) {
    .itB(@i - 1);
    @b: extract(@sides, @i);
    @name: ~"border-@{b}";
    [class^="@{name}-"], [class*="@{name}-"] {
      &.border-hover-@{color}:hover{
        border-@{b}-color: @value;
      }
    }
  }
}

.borders() {
  .border {
    border: medium solid;
    padding-left: unit(@spacing, px);
    padding-right: unit(@spacing, px);
    .sizeB(length(@sizes), border);
  }
  .itB(length(@sides));
  .itB(@i) when (@i > 0) {
    .itB(@i - 1);
    @b: extract(@sides, @i);
    @name: ~"border-@{b}";
    [class^="@{name}-"], [class*="@{name}-"] {
      border: none;
      padding-left: unit(@spacing, px);
      padding-right: unit(@spacing, px);
        @{name}-width: medium;
        @{name}-style: solid;
      .sizeB(length(@sizes), @name);
    }
  }
  .sizeB(@j,@name) when (@j > 0) {
    .sizeB(@j - 1, @name);
    @s: extract(@sizes, @j);
    &.border-@{s} when not(@s=medium) {
        @{name}-width: @s;
    }
  }
}

.set-grid-media(@prefix) {
  @n: ~"@{column-prefix}-@{prefix}";
  .counter(@col-count, @n);
  .counter(@j,@name) when (@j>0) {
    .counter(@j - 1, @name);
    @w: (@j * 100)/@col-count;
    .@{name}-@{j} {
      width: unit(@w, %);
    }
    .@{name}-offset-right-@{j} when (@w<100) {
      margin-right: unit(@w, %);
    }
    .@{name}-offset-left-@{j} when (@w<100) {
      margin-left: unit(@w, %);
    }
  }
}

.set-grids(@grids) {
  .iter(length(@grids));
  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    @grid: extract(@grids, @i);
    @n: ~"@{column-prefix}-@{grid}";
    .counter(@col-count, @n);
  }
  .counter(@j,@name) when (@j>0) {
    .counter(@j - 1, @name);
    @w: (@j * 100)/@col-count;
    .@{name}-@{j} {
      width: unit(@w, %);
    }
    .@{name}-offset-right-@{j} when (@w<100) {
      margin-right: unit(@w, %);
    }
    .@{name}-offset-left-@{j} when (@w<100) {
      margin-left: unit(@w, %);
    }
  }
}

.set-color-group(@groups) {
  .iter(length(@color-group));
  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    @pair: extract(@color-group, @i);
    @key: extract(@pair, 1);
    @value: extract(@pair, 2);
    .alert-@{key}, .btn-@{key}, .tag-@{key}, .badge-@{key} {
      background: @value;
      color: #ffffff;
    }
    .btn-@{key}:hover {
      background: extract(@color-group-hover, @i);
    }
    .text-@{key} {
      color: @value;
    }
  }
}

.headlines() {
  @all: h0;
  .iter(6);
  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    h@{i} {
      font-size: unit(@max-font-size - (@i+2), px);
      margin-top: unit(18 - (@i), px);
      margin-bottom: unit(18 - (@i), px);
    }
  }
}