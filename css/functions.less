@import "variables";

.set-colors(@list,@alternate) {
  .iter(length(@list));
  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    @pair: extract(@list, @i);
    @key: extract(@pair, 1);
    @value: extract(@pair, 2);
    .@{prefix}-text-@{key}, .@{prefix}-hover-text-@{key}:hover {
      color: @value;
    }
    .@{prefix}-@{key}, .@{prefix}-hover-@{key} {
      background-color: @value;
      color: @alternate;
    }
  }
}

.all-colors() {
  .iter(length(@light-colors), @light-colors);
  .iter(length(@dark-colors), @dark-colors);
  .iter(@i,@colors) when (@i > 0) {
    .iter(@i - 1, @colors);
    @pair: extract(@colors, @i);
    @key: extract(@pair, 1);
    @value: extract(@pair, 2);
    .border-@{key} {
      border-color: @value;
    }
    .borderColor(@key, @value);
  }
}

.setColors() {
  .iter(length(@primary-colors));
  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    @cs: extract(@primary-colors, @i);
    @n: extract(@cs, 1);
    @v: extract(@cs, 2);
    .intensity(@n, @v);
  }
  .intensity(@name,@hsl) {
    .iter(length(@darkColorDesc));
    .iter(@i) when (@i>0) {
      .iter(@i - 1);
      @dark: extract(@darkColorDesc, @i);
      @light: extract(@lightColorDesc, @i);
      @darkColor: darken(@hsl,  ((@i) * (100/(length(@darkColorDesc))) * 1%), relative);
      @lightColor: lighten(@hsl,  ((@i) * (100/(length(@lightColorDesc))) * 1%), relative);
      & when not (@dark = black) and not (@light = white){
        .backgroundColors(~"@{name}-@{dark}", @darkColor);
        .backgroundColors(~"@{name}-@{light}", @lightColor);
        .borderColor(~"@{name}-@{dark}", @darkColor);
        .borderColor(~"@{name}-@{light}", @lightColor);
        .border.border-@{name}-@{light}, .border.border-hover-@{name}-@{light}:hover {
          border-color: @hsl;
        }
        .btn-@{name}-@{light} {
          .buttonColoring(@lightColor);
          &:hover {
            .buttonColoring(@lightColor, 'hover');
          }
        }
        .btn-@{name}-@{dark} {
          .buttonColoring(@darkColor);
          &:hover {
            .buttonColoring(@darkColor, 'hover');
          }
        }
      }
    }
    .bg-@{name} {
      background-color: darken(@hsl, 0);
      color: contrast(darken(@hsl, 0));
    }
    .btn-@{name} {
      .buttonColoring(@hsl);
    }
    .border-@{name} {
      border-color: @hsl;
    }
    .borderColor(@name, darken(@hsl, 0));
  }
}

.backgroundColors(@name,@value) {
  .bg-@{name}, .bg-hover-@{name}:hover, .card-@{name} > header, .card-@{name} > footer {
    background-color: @value;
    color: contrast(@value);
  }
  .text-@{name}, .text-hover-@{name}:hover {
    color: @value;
  }
}

.borderColor(@name,@value) {
  .itB(length(@sides));
  .itB(@i) when (@i > 0) {
    .itB(@i - 1);
    @b: extract(@sides, @i);
    [class^="border-@{b}-"].border-hover-@{name}:hover, [class*="border-@{b}-"].border-hover-@{name}:hover, .border-@{b}-@{name} {
      & {
        border-@{b}-color: @value;
      }
    }
  }
}

.bordersPaddings() {
  .border {
    border: medium solid;
    padding-left: unit(@spacing, px);
    padding-right: unit(@spacing, px);
    .sizeB(length(@sizes), border);
  }
  .padding {
    padding: unit(@spacing, px);
  }
  .sidesIter();
}

.sizeB(@j,@name) when (@j > 0) {
  .sizeB(@j - 1, @name);
  @s: extract(@sizes, @j);
  &.border-@{s} when not(@s=medium) {
      @{name}-width: @s;
  }
}

.sidesIter() {
  .iter(length(@sides));
  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    @b: extract(@sides, @i);
    @name: ~"border-@{b}";
    [class^="@{name}-"], [class*="@{name}-"] {
      border: none;
      padding-left: unit(@spacing, px);
      padding-right: unit(@spacing, px);
        @{name}-width: medium;
        @{name}-style: solid;
      .sizeB(length(@sizes), @name);
    }
    .padding-@{b} {
      padding-@{b}: unit(@spacing, px);
    }
    .margin-@{b} {
      margin-@{b}: unit(@spacing, px) !important;
    }
    .iterPad(length(@paddings), @b);
  }
  .iterPad(length(@paddings), "test");
  .iterPad(@j,@dir) when (@j>0) {
    @s: extract(@paddings, @j);
    @n: extract(@s, 1);
    @w: extract(@s, 2);
    .padding-@{dir}-@{n} when not (@dir = "test") {
      padding-@{dir}: unit(@w, px);
    }
    .padding-@{n} when (@dir = "test") {
      padding: unit(@w, px);
    }
    .padding-hspace-@{n} when (@dir = "test") {
      padding-top: unit(@w, px);
      padding-bottom: unit(@w, px);
    }
    .padding-vspace-@{n} when (@dir = "test") {
      padding-left: unit(@w, px);
      padding-right: unit(@w, px);
    }
    .margin-@{dir}-@{n} when not (@dir = "test") {
      margin-@{dir}: unit(@w, px) !important;
    }
    .margin-@{n} when (@dir = "test") {
      margin: unit(@w, px) !important;
    }
    .margin-hspace-@{n} when (@dir = "test") {
      margin-top: unit(@w, px) !important;
      margin-bottom: unit(@w, px) !important;
    }
    .margin-vspace-@{n} when (@dir = "test") {
      margin-left: unit(@w, px) !important;
      margin-right: unit(@w, px) !important;
    }
    .iterPad(@j - 1, @dir);
  }
}

.gridAdjustments() {
  @txt-left: replace(~"@{grids}", '([a-z]+)(,|$)', '.text-$1-left$2', g);
  @{txt-left} {
    text-align: left;
  }
  @txt-right: replace(~"@{grids}", '([a-z]+)(,|$)', '.text-$1-right$2', g);
  @{txt-right} {
    text-align: right;
  }
  @txt-center: replace(~"@{grids}", '([a-z]+)(,|$)', '.text-$1-center$2', g);
  @{txt-center} {
    text-align: center;
  }
}

.gridAdjust(@gridName) {
  .text-@{gridName}-left {
    text-align: left;
  }
  .text-@{gridName}-right {
    text-align: right;
  }
  .text-@{gridName}-center {
    text-align: center;
  }
}

.set-grid-media(@prefix) {
  @n: ~"@{column-prefix}-@{prefix}";
  .gridCounter(@col-count, @n);
}

.set-grids(@grids) {
  .iter(length(@grids));
  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    @grid: extract(@grids, @i);
    @n: ~"@{column-prefix}-@{grid}";
    .gridCounter(@col-count, @n);
  }
}

.gridCounter(@j,@name) when (@j>0) {
  .gridCounter(@j - 1, @name);
  @w: (@j * 100)/@col-count;
  .@{name}-@{j} {
    width: unit(@w, %);
  }
  .@{name}-offset-right-@{j} when (@w<100) {
    margin-right: unit(@w, %);
  }
  .@{name}-offset-left-@{j} when (@w<100) {
    margin-left: unit(@w, %);
  }
}

.set-color-group(@groups) {
  .iter(length(@color-group));
  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    @pair: extract(@color-group, @i);
    @key: extract(@pair, 1);
    @value: extract(@pair, 2);
    .alert-@{key}, .tag-@{key}, .badge-@{key} {
      background: @value;
      color: contrast(@value);
    }
    .btn-border-@{key} {
      border: 1px solid @value;
      background: none;
      &:hover {
        box-shadow: 1px 1px 3px @value;
      }
    }
    .btn-@{key} {
      .buttonColoring(@value);
      &:hover {
        .buttonColoring(@value, 'hover');
      }
    }
    .text-@{key} {
      color: @value;
    }
  }
}

.headlines() {
  @all: h0;
  .iter(6);
  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    h@{i} {
      font-size: unit(@max-font-size - (@i+2), px);
      margin-top: unit(18 - (@i), px);
      margin-bottom: unit(18 - (@i), px);
      small {
        display: block;
        font-size: unit((@max-font-size - (@i+2))/2, px);
        color: @defColor;
      }
    }
  }
}

.roundCorners() {
  .iter(length(@rounds));
  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    @pair: extract(@rounds, @i);
    @name: extract(@pair, 1);
    @value: extract(@pair, 2);
    .round-@{name} when not(@name = circle) {
      border-radius: unit(@value, px);
      min-width: unit(@value, px);
      min-height: unit(@value, px);
    }
    .circle, .round-@{name} {
      & when (@name = circle) {
        border-radius: 50%;
      }
    }
  }
}

.rowColumns() {
  @rows: replace(replace(~"@{contents}", '(^|\s)([a-z]+)(\s+)([a-z\-]+)(,|$)', '$1.row-$2$5', g), '-test', '');
  @columns: replace(~"@{rows}", 'row', 'column', g);
  @rc: ~"@{rows}, @{columns}";
  @nw: replace(e(@rc), '([a-z\-]+)(,|$)', '$1.no-wrap$2', g);
  @str: replace(e(@rc), '([a-z\-]+)(,|$)', '$1.stretch$2', g);
  @ac: replace(e(@rc), '([a-z\-]+)(,|$)', '$1.align-center$2', g);
  @ab: replace(e(@rc), '([a-z\-]+)(,|$)', '$1.align-bottom$2', g);
  @{rc} {
    display: flex;
    align-content: stretch;
    align-items: flex-start;
    flex-wrap: wrap;
  }
  @{rows} {
    flex-direction: row !important;
  }
  @{columns} {
    flex-direction: column !important;
  }
  @{nw} {
    flex-wrap: nowrap !important;
  }
  @{str} {
    align-items: stretch !important;
  }
  @{ac} {
    align-items: center !important;
  }
  @{ab} {
    align-items: flex-end !important;
  }
  .iter(length(@contents));
  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    @pair: extract(@contents, @i);
    @name: extract(@pair, 1);
    @dir: extract(@pair, 2);
    .row-@{name}, .column-@{name} {
      & when not (@name = test) {
        justify-content: @dir !important;
      }
    }
    .row, .column {
      & when (@name = test) {
        justify-content: @dir !important;
      }
    }
  }
}

.buttons() {
  @elm: e(@buttonElements);
  @block: replace(@elm, '(^|\s+)(.+?)(,|$)', '$1$2.btn-block$3', g);
  @disabled: replace(@elm, '(^|\s+)(.+?)(,|$)', '$1$2.disabled$3 $1$2[disabled]$3', g);
  @disHover: replace(@elm, '(^|\s+)(.+?)(,|$)', '$1$2.disabled:hover$3 $1$2[disabled]:hover$3', g);
  @hover: replace(@elm, '(^|\s+)(.+?)(,|$)', '$1$2:hover$3', g);
  @{elm} {
    display: inline-block;
    line-height: 1;
    padding: unit(@buttonDefSize, px) unit(@buttonDefSize * 2, px);
    //.buttonColoring();
  }
  @{hover} {
    cursor: pointer;
    //.buttonColoring(@buttonDefColor,'hover');
  }
  @{block} {
    display: block;
    width: 100%;
  }
  @{disabled} {
    cursor: not-allowed;
    .buttonColoring(#7b7b7b);
  }
  @{disHover} {
    .buttonColoring(#7b7b7b, 'hover');
  }
  .sizes(length(@buttonSizes));
  .sizes(@i) when (@i > 0) {
    .sizes(@i - 1);
    @sz: extract(@buttonSizes, @i);
    @n: extract(@sz, 1);
    @v: extract(@sz, 2);
    @es: replace(@elm, '(^|\s+)(.+?)(,|$)', '$1$2.btn-@{n}$3', g);
    @{es} {
      padding: unit(@v, px) unit(@v * 2, px);
    }
  }
}

.buttonColoring(@color:@buttonDefColor,@mode:'normal') {
  & when not (@mode = 'hover') {
    background-color: @color;
    color: contrast(@color);
    border: 2px solid lighten(@color, 20%);
  }
  & when (@mode = 'hover') {
    @hove: darken(@color, 10%);
    background-color: @hove;
    color: contrast(@hove);
    border: 2px solid lighten(@hove, 10%);
  }
}

.tables() {
  @defColor: #e4e4e4;
  table {
    border-collapse: collapse;
    .thead();
    .tbody;
    th, td {
      padding: unit(@spacing/2, px) unit(@spacing, px);
      font-size: unit(@spacing, px);
      text-align: left;
    }
    &.tiny {
      @sp: @spacing - 3;
      th, td {
        padding: unit(@sp/2, px) unit(@sp, px);
        font-size: unit(@sp, px);
      }
    }
    &.small {
      @sp: @spacing - 1.5;
      th, td {
        padding: unit(@sp/2, px) unit(@sp, px);
        font-size: unit(@sp, px);
      }
    }
    &.large {
      @sp: @spacing + 5;
      th, td {
        padding: unit(@sp/2, px) unit(@sp, px);
        font-size: unit(@sp, px);
      }
    }
    &.xlarge {
      @sp: @spacing + 8;
      th, td {
        padding: unit(@sp/2, px) unit(@sp, px);
        font-size: unit(@sp, px);
      }
    }
    .thead() {
      thead th, thead td, th {
        font-weight: bold;
      }
    }
    .tbody() {
      tbody td, tbody th {
      }
      &.striped {
        tbody tr:nth-child(odd) {
          background-color: @defColor;
          color: contrast(@defColor);
        }
        tr:nth-child(even) {
        }
      }
      &.bordered {
        td, th {
          border: 1px solid @defColor;
        }
      }
      &.bordered-rows {
        td, th {
          border-bottom: 1px solid @defColor;
        }
      }
      &.hover {
        tbody tr:hover {
          background-color: @defColor;
        }
        &.striped {
          tbody tr:hover {
            background-color: darken(@defColor, 20%);
          }
        }
      }
    }
    .iter(length(@color-group));
  }
  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    @pair: extract(@color-group, @i);
    @name: extract(@pair, 1);
    @value: extract(@pair, 2);
    @c: @value; // darken(@value, 20%, relative);
    &.table-@{name} {
      border: .2px solid @c;
      thead {
        background-color: @c;
        th, td {
          color: contrast(@c) !important;
        }
      }
      &.bordered {
        td, th {
          border: 1px solid @c;
        }
      }
      &.bordered-rows {
        td, th {
          border-bottom: 1px solid @c;
        }
      }
      &.hover {
        tbody tr:hover {
          background-color: lighten(@c, 10%);
        }
        &.striped {
          tbody tr:hover {
            background-color: lighten(@c, 50%);
            td, th {
              color: contrast(lighten(@c, 50%));
            }
          }
        }
      }
    }
    tr.@{name} {
      background-color: lighten(@c, 50%);
      td, th {
        color: contrast(lighten(@c, 50%));
      }
    }
  }
}

.lists() {
  ul {
    &.list-group {
      > li {
        display: flex;
        margin-bottom: unit(@spacing/3, px);
        border-bottom: 1px solid @defColor;
        align-content: flex-start;
        flex-wrap: wrap;
        position: relative;
        align-items: center;
        header, section, footer, .button-group {
          padding: unit(@spacing/2, px) unit(@spacing, px);
          width: 100%;
        }
        header, footer {
          background-color: lighten(@defColor, 30%);
        }
        header {
          font-weight: bold;
        }
        section {
        }
        footer {
        }
        > .button-group {
          display: flex;
          flex-wrap: nowrap;
          align-items: stretch;
          justify-content: space-between;
          > * {
            flex-grow: 1;
            margin-left: 5px;
            margin-right: 5px;
            &:first-child {
              margin-left: 0;
            }
            &:last-child {
              margin-right: 0;
            }
          }
        }
        > button, > input[type=reset], > input[type=submit], > input[type=button], > [class^='btn-'], > [class*='btn-'] {
          display: block !important;
          width: 100%;
        }
        > img, > figure {
          width: 20%;
          border-radius: 50%;
          & ~ * {
            width: 80%;
            padding: 0;
          }
        }
        > figure {
          padding: 0;
          margin: 0;
          img {
            width: 100%;
            -webkit-border-radius: 50%;
            -moz-border-radius: 50%;
            border-radius: 50%;
          }
          figcaption {
            text-align: center;
            width: 100%;
            display: block;
            padding: unit(@spacing/3, px) unit(@spacing/2, px);
          }
        }
      }
      .iter(length(@color-group));
      .iter(@i) when (@i > 0) {
        .iter(@i - 1);
        @pair: extract(@color-group, @i);
        @name: extract(@pair, 1);
        @value: extract(@pair, 2);
        &.list-@{name} {
          li {
            header, footer {
              background-color: lighten(@value, 40%);
              color: contrast(lighten(@value, 40%));
            }
          }
        }
      }
    }
    &:not(.default) {
      list-style: none;
      margin: 0;
      padding: 0;
    }
    &.inline {
      li {
        display: inline-block;
        padding: 3px 6px;
      }
    }
  }
}